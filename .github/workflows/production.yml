name: nonproduction-ci

on:
  create:
    release:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v2
      with:
        ref: $GITHUB_REF

    - name: Prepare Lambda Version
      shell: bash
      run: echo "##[set-output name=version;]$(date +%Y%m%d%H%M)_${GITHUB_REF}"
      id: lambda_version

    - name: Echo Build Version
      run: |
        echo ${{ steps.lambda_version.outputs.version }}

    - name: Build RAP-J5
      run: |
        cd j5
        npm install
        npm prune --production
        zip -qr j5.zip lib node_modules handler.js package.json

    - name: Build RAP-Log-Store
      run: |
        cd log-store
        npm install
        npm prune --production
        zip -qr log-store.zip lib node_modules handler.js package.json

    - name: Configure AWS credentials from DEV account and assume a role for Terraform commands
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
        role-to-assume: ${{ secrets.DEV_AWS_ROLE_TO_ASSUME }}
        role-duration-seconds: 1200
        aws-region: us-east-1

    - name: Deliver to S3 bucket
      run: |
        aws s3 cp j5/j5.zip s3://dev-pax8-lambda-deploy/terraform/rap-j5/${{ steps.lambda_version.outputs.version }}/j5.zip --sse=aws:kms
        aws s3 cp log-store/log-store.zip s3://dev-pax8-lambda-deploy/terraform/rap-log-store/${{ steps.lambda_version.outputs.version }}/log-store.zip --sse=aws:kms

    - name: Fetch terraform script
      uses: actions/checkout@v2
      with:
        repository: pax8/infrastructure
        ref: refs/heads/master
        token: ${{ secrets.PAT_GITHUB }}
        path: infrastructure

    - name: Deploy RAP-J5
      run: |
        cd infrastructure/microservices/rap-j5/production
        echo init...
        terraform init
        echo refresh...
        terraform refresh
        echo plan...
        terraform plan -var 'lambda_version=${{ steps.lambda_version.outputs.version }}' -out=config

    - name: Deploy RAP-Log-Store
      run: |
        cd infrastructure/microservices/rap-log-store/production
        echo init...
        terraform init
        echo refresh...
        terraform refresh
        echo plan...
        terraform plan -var 'lambda_version=${{ steps.lambda_version.outputs.version }}' -out=config
